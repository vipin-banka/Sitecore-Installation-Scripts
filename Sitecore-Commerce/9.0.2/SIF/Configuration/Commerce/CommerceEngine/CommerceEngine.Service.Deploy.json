// -------------------------------------------------------------------------- //
//         Sitecore Install Framework - Deploy Commerce Services              //
//                                                                            //
//  Run this configuration to deploy Commerce Engine Services.                //
//                                                                            //
//  NOTE: Only single line comments are accepted in configurations.           //
// -------------------------------------------------------------------------- //
{
  "Parameters": {
    "RootCertFileName": { "Type": "string", "Description": "The file name of the root certificate to be created.", "DefaultValue": "SitecoreRootCert" },
    "CommerceServicesDbServer": { "Type": "string", "Description": "Commerce Engine database server name" },		
    "CommerceServicesDbName": { "Type": "string", "Description": "Commerce Services database name" },
    "CommerceServicesGlobalDbName": { "Type": "string", "Description": "Commerce Services Global database name" },
    "CommerceServicesPostfix": { "Type": "string", "DefaultValue": "_Sc9" },
    "CommerceSearchProvider": { "Type": "string", "Description": "The search provider used for the Commerce Engine - Accepted values are 'SOLR' and 'AZURE'" },
    "SolrUrl": { "Type": "string", "DefaultValue": "https://localhost:8983/solr", "Description": "The Solr instance url." },
    "SearchIndexPrefix": { "Type": "string", "DefaultValue": "", "Description": "The search index prefix." },
    "AzureSearchServiceName": { "Type": "string", "DefaultValue": "", "Description": "The Azure search service name." },
    "AzureSearchAdminKey": { "Type": "string", "DefaultValue": "", "Description": "The Azure search service admin key." },
    "AzureSearchQueryKey": { "Type": "string", "DefaultValue": "", "Description": "The Azure search service query key." },
    "SiteHostHeaderName": { "Type": "string", "Description": "The host header name of the site to be deployed." },
    "CommerceServicesPort": { "Type": "string", "Description": "CommerceOps Services Port" },
    "CommerceAuthoringServicesPort": { "Type": "string", "Description": "CommerceAuthoring Services Port" },
    "SitecoreCommerceEngineZipPath": { "Type": "string", "Description": "Sitecore Commerce Engine zip Path" },
    "UserAccount": { "Type": "psobject", "DefaultValue": {"UserName": "", "Domain": "$env:COMPUTERNAME", "Password": ""} },
	"BraintreeAccount": { "Type": "psobject", "DefaultValue": {"MerchantId": "", "PublicKey": "", "PrivateKey": ""}, "Description": "Braintree account for Payment plugin." },
	"CommerceServicesPrefix": { "Type": "string", "DefaultValue": "" },
    "SitecoreIdentityServicePort": {
      "Type": "string",
      "Description": "Sitecore Identity Service port"
    },
	"SitecoreBizFxServicePort": {
		"Type": "string",
		"Description": "Sitecore Biz Fx port"
	},
	"ServiceName": {
		"Type": "string",
		"Description": "Sitecore Biz Fx port"
	},	
	"SystemDrive": {
		"Type": "string",
		"Description": "System Drive",
		"DefaultValue": "C:"
	},
	"WebsiteRootFolder": {
		"Type": "string",
		"Description": "Website root folder",
		"DefaultValue": "\\inetpub\\wwwroot\\"
	},
	"RootCertPrefix": {
		"Type": "string",
		"Description": "The file name of the root certificate to be created.",
		"DefaultValue": "DO_NOT_TRUST_"
	},
	"RootCertStore": {
		"Type": "string",
		"Description": "The file name of the root certificate to be created.",
		"DefaultValue": "cert:\\LocalMachine\\Root"
	}
  },
  "Variables": {
	"CommerceServiceName": "[concat(parameter('CommerceServicesPrefix'), concat(parameter('ServiceName'), parameter('CommerceServicesPostfix')))]",
	"CommerceServicePhysicalPath": "[concat(parameter('SystemDrive'), concat(parameter('WebsiteRootFolder'), variable('CommerceServiceName')))]",
    // The name dns name of the root certificate.
    "Root.Cert.DnsName": "[concat(parameter('RootCertPrefix'), parameter('RootCertFileName'))]",
    // The certificate store for the root certificate.
    "Root.Cert.Store": "[parameter('RootCertStore')]"
  },
  "Modules": [
    "ManageCommerceService",
    "DeployCommerceDatabase",
    "DeployCommerceContent",
    "WindowsLocalUser"
  ],
  "Tasks": {
    "StopSite": {
      "Type": "ManageWebsite",
      "Params": {
        "Name": "[variable('CommerceServiceName')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveSite": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceServiceName')]",
        "Action": "Remove-Website"
      }
    },
    "StopAppPool": {
      "Type": "ManageAppPool",
      "Params": {
        "Name": "[variable('CommerceServiceName')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveAppPool": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceServiceName')]",
        "Action": "Remove-WebAppPool"
      }
    },
    "RemoveSiteFolder": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "Name",
        "PhysicalPath": "[variable('CommerceServicePhysicalPath')]",
        "Action": "Remove-Item"
      }
    },
    "DeployCommerceServiceContent": {
      "Type": "DeployCommerceContent",
      "Params": {
        "Name": "[variable('CommerceServiceName')]",
        "ServicesContentPath": "[parameter('SitecoreCommerceEngineZipPath')]",
        "PhysicalPath": "[variable('CommerceServicePhysicalPath')]",
        "CommerceServicesDbServer": "[parameter('CommerceServicesDbServer')]",
        "CommerceServicesDbName": "[parameter('CommerceServicesDbName')]",
        "CommerceServicesGlobalDbName": "[parameter('CommerceServicesGlobalDbName')]",
        "SiteHostHeaderName": "[parameter('SiteHostHeaderName')]",
        "CommerceAuthoringServicesPort": "[parameter('CommerceAuthoringServicesPort')]",
        "CommerceSearchProvider": "[parameter('CommerceSearchProvider')]",
        "SolrUrl": "[parameter('SolrUrl')]",
        "SearchIndexPrefix": "[parameter('SearchIndexPrefix')]",
        "UserAccount": "[parameter('UserAccount')]",
        "BraintreeAccount": "[parameter('BraintreeAccount')]",
        "AzureSearchServiceName": "[parameter('AzureSearchServiceName')]",
        "AzureSearchAdminKey": "[parameter('AzureSearchAdminKey')]",
        "AzureSearchQueryKey": "[parameter('AzureSearchQueryKey')]",
		"SitecoreIdentityServicePort": "[parameter('SitecoreIdentityServicePort')]",
		"SitecoreBizFxServicePort": "[parameter('SitecoreBizFxServicePort')]"
      }
    },
    "CreatePathsOps": {
      "Type": "EnsurePath",
      "Params": {
        "Exists": [
          "[variable('CommerceServicePhysicalPath')]"
        ]
      }
    },
    "CreateWebAppPoolOps": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceServiceName')]",
        "Action": "Create-WebAppPool",
        "UserAccount": "[parameter('UserAccount')]"
      }
    },
    "CreateWebsiteOps": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceServiceName')]",
        "Action": "Create-Website",
        "AppPoolName": "[variable('CommerceServiceName')]",
        "PhysicalPath": "[variable('CommerceServicePhysicalPath')]",
        "Port": "[parameter('CommerceServicesPort')]",
        "Signer": "[GetCertificate(variable('Root.Cert.DnsName'), variable('Root.Cert.Store'))]"
      }
    }
  }
}