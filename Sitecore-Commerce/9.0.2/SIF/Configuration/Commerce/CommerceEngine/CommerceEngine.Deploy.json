// -------------------------------------------------------------------------- //
//         Sitecore Install Framework - Deploy Commerce Services              //
//                                                                            //
//  Run this configuration to deploy Commerce Engine Services.                //
//                                                                            //
//  NOTE: Only single line comments are accepted in configurations.           //
// -------------------------------------------------------------------------- //
{
  "Parameters": {
    "CertificateName": { "Type": "string", "Description": "The name of the certificate to be used." },
    "RootCertFileName": { "Type": "string", "Description": "The file name of the root certificate to be created.", "DefaultValue": "SitecoreRootCert" },
    "CommerceServicesDbServer": { "Type": "string", "Description": "Commerce Engine database server name" },		
    "CommerceServicesDbName": { "Type": "string", "Description": "Commerce Services database name" },
    "CommerceServicesGlobalDbName": { "Type": "string", "Description": "Commerce Services Global database name" },
    "CommerceServicesPostfix": { "Type": "string", "DefaultValue": "_Sc9" },
    "SitecoreDbServer": { "Type": "string", "Description": "Sitecore database server name" },
    "SitecoreCoreDbName": { "Type": "string", "Description": "Sitecore Core database name" },
    "CommerceSearchProvider": { "Type": "string", "Description": "The search provider used for the Commerce Engine - Accepted values are 'SOLR' and 'AZURE'" },
    "SolrUrl": { "Type": "string", "DefaultValue": "https://localhost:8983/solr", "Description": "The Solr instance url." },
    "SearchIndexPrefix": { "Type": "string", "DefaultValue": "", "Description": "The search index prefix." },
    "AzureSearchServiceName": { "Type": "string", "DefaultValue": "", "Description": "The Azure search service name." },
    "AzureSearchAdminKey": { "Type": "string", "DefaultValue": "", "Description": "The Azure search service admin key." },
    "AzureSearchQueryKey": { "Type": "string", "DefaultValue": "", "Description": "The Azure search service query key." },
    "CommerceEngineDacPac": { "Type": "string", "Description": "Commerce Engine DacPac" },
    "SiteHostHeaderName": { "Type": "string", "Description": "The host header name of the site to be deployed." },
    "CommerceOpsServicesPort": { "Type": "string", "Description": "CommerceOps Services Port" },
    "CommerceShopsServicesPort": { "Type": "string", "Description": "CommerceShops Services Port" },
    "CommerceAuthoringServicesPort": { "Type": "string", "Description": "CommerceAuthoring Services Port" },
    "CommerceMinionsServicesPort": { "Type": "string", "Description": "CommerceMinions Services Port" },
    "SitecoreCommerceEngineZipPath": { "Type": "string", "Description": "Sitecore Commerce Engine zip Path" },
    "UserAccount": { "Type": "psobject", "DefaultValue": {"UserName": "", "Domain": "$env:COMPUTERNAME", "Password": ""} },
	"BraintreeAccount": { "Type": "psobject", "DefaultValue": {"MerchantId": "", "PublicKey": "", "PrivateKey": ""}, "Description": "Braintree account for Payment plugin." },
	"CommerceServicesPrefix": { "Type": "string", "DefaultValue": "" },
    "SitecoreIdentityServicePort": {
      "Type": "string",
      "Description": "Sitecore Identity Service port"
    },
	"SitecoreBizFxServicePort": {
		"Type": "string",
		"Description": "Sitecore Biz Fx port"
	},
	"CommerceAuthoringServiceName": {
		"Type": "string",
		"Description": "Commerce Authoring Service Name",
		"DefaultValue": "CommerceAuthoring_"
	},
	"CommerceShopsServiceName": {
		"Type": "string",
		"Description": "Commerce Shops Service Name",
		"DefaultValue": "CommerceShops_"
	},
	"CommerceMinionsServiceName": {
		"Type": "string",
		"Description": "Commerce Minions Service Name",
		"DefaultValue": "CommerceMinions_"
	},
	"CommerceOpsServiceName": {
		"Type": "string",
		"Description": "Commerce Ops Service Name",
		"DefaultValue": "CommerceOps_"
	},	
	"SystemDrive": {
		"Type": "string",
		"Description": "System Drive",
		"DefaultValue": "C:"
	},
	"WebsiteRootFolder": {
		"Type": "string",
		"Description": "Website root folder",
		"DefaultValue": "\\inetpub\\wwwroot\\"
	},
    "RootCertPrefix": {
      "Type": "string",
      "Description": "The file name of the root certificate to be created.",
      "DefaultValue": "DO_NOT_TRUST_"
    },
    "RootCertStore": {
      "Type": "string",
      "Description": "The file name of the root certificate to be created.",
      "DefaultValue": "cert:\\LocalMachine\\Root"
    }
  },
  "Variables": {
    "CommerceOps": "[concat(parameter('CommerceServicesPrefix'), concat(parameter('CommerceOpsServiceName'), parameter('CommerceServicesPostfix')))]",
    "CommerceShops": "[concat(parameter('CommerceServicesPrefix'), concat(parameter('CommerceShopsServiceName'), parameter('CommerceServicesPostfix')))]",
    "CommerceAuthoring": "[concat(parameter('CommerceServicesPrefix'), concat(parameter('CommerceAuthoringServiceName'), parameter('CommerceServicesPostfix')))]",
    "CommerceMinions": "[concat(parameter('CommerceServicesPrefix'), concat(parameter('CommerceMinionsServiceName'), parameter('CommerceServicesPostfix')))]",
    "CommerceOpsPhysicalPath": "[concat(parameter('SystemDrive'), concat(parameter('WebsiteRootFolder'), variable('CommerceOps')))]",
    "CommerceShopsPhysicalPath": "[concat(parameter('SystemDrive'), concat(parameter('WebsiteRootFolder'), variable('CommerceShops')))]",
    "CommerceAuthoringPhysicalPath": "[concat(parameter('SystemDrive'), concat(parameter('WebsiteRootFolder'), variable('CommerceAuthoring')))]",
    "CommerceMinionsPhysicalPath": "[concat(parameter('SystemDrive'), concat(parameter('WebsiteRootFolder'), variable('CommerceMinions')))]",
    // The name dns name of the root certificate.
    "Root.Cert.DnsName": "[concat(parameter('RootCertPrefix'), parameter('RootCertFileName'))]",
    // The certificate store for the root certificate.
    "Root.Cert.Store": "[parameter('RootCertStore')]"
  },
  "Modules": [
    "ManageCommerceService",
    "DeployCommerceDatabase",
    "DeployCommerceContent",
    "WindowsLocalUser"
  ],
  "Tasks": {
    "StopSiteOps": {
      "Type": "ManageWebsite",
      "Params": {
        "Name": "[variable('CommerceOps')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveSiteOps": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceOps')]",
        "Action": "Remove-Website"
      }
    },
    "StopAppPoolOps": {
      "Type": "ManageAppPool",
      "Params": {
        "Name": "[variable('CommerceOps')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveAppPoolOps": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceOps')]",
        "Action": "Remove-WebAppPool"
      }
    },
    "RemoveSiteFolderOps": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "Name",
        "PhysicalPath": "[variable('CommerceOpsPhysicalPath')]",
        "Action": "Remove-Item"
      }
    },
    "StopSiteShops": {
      "Type": "ManageWebsite",
      "Params": {
        "Name": "[variable('CommerceShops')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveSiteShops": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceShops')]",
        "Action": "Remove-Website"
      }
    },
    "StopAppPoolShops": {
      "Type": "ManageAppPool",
      "Params": {
        "Name": "[variable('CommerceShops')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveAppPool": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceShops')]",
        "Action": "Remove-WebAppPool"
      }
    },
    "RemoveSiteFolderShops": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "Name",
        "PhysicalPath": "[variable('CommerceShopsPhysicalPath')]",
        "Action": "Remove-Item"
      }
    },
    "StopSiteAuthoring": {
      "Type": "ManageWebsite",
      "Params": {
        "Name": "[variable('CommerceAuthoring')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveSiteAuthoring": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceAuthoring')]",
        "Action": "Remove-Website"
      }
    },
    "StopAppPoolAuthoring": {
      "Type": "ManageAppPool",
      "Params": {
        "Name": "[variable('CommerceAuthoring')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveAppPoolAuthoring": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceAuthoring')]",
        "Action": "Remove-WebAppPool"
      }
    },
    "RemoveSiteFolderAuthoring": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "Name",
        "PhysicalPath": "[variable('CommerceAuthoringPhysicalPath')]",
        "Action": "Remove-Item"
      }
    },
    "StopSiteMinions": {
      "Type": "ManageWebsite",
      "Params": {
        "Name": "[variable('CommerceMinions')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveSiteMinions": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceMinions')]",
        "Action": "Remove-Website"
      }
    },
    "StopAppPoolMinions": {
      "Type": "ManageAppPool",
      "Params": {
        "Name": "[variable('CommerceMinions')]",
        "Action": "Stop",
        "ErrorAction": "SilentlyContinue"
      }
    },
    "RemoveAppPoolMinions": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceMinions')]",
        "Action": "Remove-WebAppPool"
      }
    },
    "RemoveSiteFolderMinions": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "Name",
        "PhysicalPath": "[variable('CommerceMinionsPhysicalPath')]",
        "Action": "Remove-Item"
      }
    },
    "EnsureLocalUser": {
      "Type": "EnsureLocalUser",
      "Params": {
        "UserAccount": "[parameter('UserAccount')]"
      }
    },
    "DeployCommerceDatabase": {
      "Type": "DeployCommerceDatabase",
      "Params": {
        "CommerceServicesDbServer": "[parameter('CommerceServicesDbServer')]",
        "CommerceServicesDbName": "[parameter('CommerceServicesDbName')]",
        "CommerceServicesGlobalDbName": "[parameter('CommerceServicesGlobalDbName')]",
        "CommerceEngineDacPac": "[parameter('CommerceEngineDacPac')]",
        "UserAccount": "[parameter('UserAccount')]"
      }
    },
    "AddCommerceUserToCoreDatabase": {
      "Type": "AddCommerceUserToCoreDatabase",
      "Params": {
        "SitecoreDbServer": "[parameter('SitecoreDbServer')]",
        "SitecoreCoreDbName": "[parameter('SitecoreCoreDbName')]",
        "UserAccount": "[parameter('UserAccount')]"
      }
    },
    "DeployCommerceContentOps": {
      "Type": "DeployCommerceContent",
      "Params": {
        "Name": "[variable('CommerceOps')]",
        "ServicesContentPath": "[parameter('SitecoreCommerceEngineZipPath')]",
        "PhysicalPath": "[variable('CommerceOpsPhysicalPath')]",
        "CommerceServicesDbServer": "[parameter('CommerceServicesDbServer')]",
        "CommerceServicesDbName": "[parameter('CommerceServicesDbName')]",
        "CommerceServicesGlobalDbName": "[parameter('CommerceServicesGlobalDbName')]",
        "SiteHostHeaderName": "[parameter('SiteHostHeaderName')]",
        "CommerceAuthoringServicesPort": "[parameter('CommerceAuthoringServicesPort')]",
        "CommerceSearchProvider": "[parameter('CommerceSearchProvider')]",
        "SolrUrl": "[parameter('SolrUrl')]",
        "SearchIndexPrefix": "[parameter('SearchIndexPrefix')]",
        "UserAccount": "[parameter('UserAccount')]",
        "BraintreeAccount": "[parameter('BraintreeAccount')]",
        "AzureSearchServiceName": "[parameter('AzureSearchServiceName')]",
        "AzureSearchAdminKey": "[parameter('AzureSearchAdminKey')]",
        "AzureSearchQueryKey": "[parameter('AzureSearchQueryKey')]",
		"SitecoreIdentityServicePort": "[parameter('SitecoreIdentityServicePort')]",
		"SitecoreBizFxServicePort": "[parameter('SitecoreBizFxServicePort')]"
      }
    },
    "CreatePathsOps": {
      "Type": "EnsurePath",
      "Params": {
        "Exists": [
          "[variable('CommerceOpsPhysicalPath')]"
        ]
      }
    },
    "CreateWebAppPoolOps": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceOps')]",
        "Action": "Create-WebAppPool",
        "UserAccount": "[parameter('UserAccount')]"
      }
    },
    "CreateWebsiteOps": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceOps')]",
        "Action": "Create-Website",
        "AppPoolName": "[variable('CommerceOps')]",
        "PhysicalPath": "[variable('CommerceOpsPhysicalPath')]",
        "Port": "[parameter('CommerceOpsServicesPort')]",
        "Signer": "[GetCertificate(variable('Root.Cert.DnsName'), variable('Root.Cert.Store'))]"
      }
    },    
    "DeployCommerceContentShops": {
      "Type": "DeployCommerceContent",
      "Params": {
        "Name": "[variable('CommerceShops')]",
        "ServicesContentPath": "[parameter('SitecoreCommerceEngineZipPath')]",
        "PhysicalPath": "[variable('CommerceShopsPhysicalPath')]",
		"CommerceServicesDbServer": "[parameter('CommerceServicesDbServer')]",
        "CommerceServicesDbName": "[parameter('CommerceServicesDbName')]",
        "CommerceServicesGlobalDbName": "[parameter('CommerceServicesGlobalDbName')]",
        "SiteHostHeaderName": "[parameter('SiteHostHeaderName')]",
        "CommerceAuthoringServicesPort": "[parameter('CommerceAuthoringServicesPort')]",
        "CommerceSearchProvider": "[parameter('CommerceSearchProvider')]",
        "SolrUrl": "[parameter('SolrUrl')]",
        "SearchIndexPrefix": "[parameter('SearchIndexPrefix')]",
        "UserAccount": "[parameter('UserAccount')]",
        "BraintreeAccount": "[parameter('BraintreeAccount')]",
        "AzureSearchServiceName": "[parameter('AzureSearchServiceName')]",
        "AzureSearchAdminKey": "[parameter('AzureSearchAdminKey')]",
        "AzureSearchQueryKey": "[parameter('AzureSearchQueryKey')]",
		"SitecoreIdentityServicePort": "[parameter('SitecoreIdentityServicePort')]",
		"SitecoreBizFxServicePort": "[parameter('SitecoreBizFxServicePort')]"
      }
    },
    "CreatePathsShops": {
      "Type": "EnsurePath",
      "Params": {
        "Exists": [
          "[variable('CommerceShopsPhysicalPath')]"
        ]
      }
    },
    "CreateWebAppPoolShops": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceShops')]",
        "Action": "Create-WebAppPool",
        "UserAccount": "[parameter('UserAccount')]"
      }
    },
    "CreateWebsiteShops": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceShops')]",
        "Action": "Create-Website",
        "AppPoolName": "[variable('CommerceShops')]",
        "PhysicalPath": "[variable('CommerceShopsPhysicalPath')]",
        "Port": "[parameter('CommerceShopsServicesPort')]",
        "Signer": "[GetCertificate(variable('Root.Cert.DnsName'), variable('Root.Cert.Store'))]"
      }
    },
    "DeployCommerceContentAuthoring": {
      "Type": "DeployCommerceContent",
      "Params": {
        "Name": "[variable('CommerceAuthoring')]",
        "ServicesContentPath": "[parameter('SitecoreCommerceEngineZipPath')]",
        "PhysicalPath": "[variable('CommerceAuthoringPhysicalPath')]",
		"CommerceServicesDbServer": "[parameter('CommerceServicesDbServer')]",
        "CommerceServicesDbName": "[parameter('CommerceServicesDbName')]",
        "CommerceServicesGlobalDbName": "[parameter('CommerceServicesGlobalDbName')]",
        "SiteHostHeaderName": "[parameter('SiteHostHeaderName')]",
        "CommerceAuthoringServicesPort": "[parameter('CommerceAuthoringServicesPort')]",
        "CommerceSearchProvider": "[parameter('CommerceSearchProvider')]",
        "SolrUrl": "[parameter('SolrUrl')]",
        "SearchIndexPrefix": "[parameter('SearchIndexPrefix')]",
        "UserAccount": "[parameter('UserAccount')]",
        "BraintreeAccount": "[parameter('BraintreeAccount')]",
        "AzureSearchServiceName": "[parameter('AzureSearchServiceName')]",
        "AzureSearchAdminKey": "[parameter('AzureSearchAdminKey')]",
        "AzureSearchQueryKey": "[parameter('AzureSearchQueryKey')]",
		"SitecoreIdentityServicePort": "[parameter('SitecoreIdentityServicePort')]",
		"SitecoreBizFxServicePort": "[parameter('SitecoreBizFxServicePort')]"
      }
    },
    "CreatePathsAuthoring": {
      "Type": "EnsurePath",
      "Params": {
        "Exists": [
          "[variable('CommerceAuthoringPhysicalPath')]"
        ]
      }
    },
    "CreateWebAppPoolAuthoring": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceAuthoring')]",
        "Action": "Create-WebAppPool",
        "UserAccount": "[parameter('UserAccount')]"
      }
    },
    "CreateWebsiteAuthoring": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceAuthoring')]",
        "Action": "Create-Website",
        "AppPoolName": "[variable('CommerceAuthoring')]",
        "PhysicalPath": "[variable('CommerceAuthoringPhysicalPath')]",
        "Port": "[parameter('CommerceAuthoringServicesPort')]",
        "Signer": "[GetCertificate(variable('Root.Cert.DnsName'), variable('Root.Cert.Store'))]"
      }
    },
    "DeployCommerceContentMinions": {
      "Type": "DeployCommerceContent",
      "Params": {
        "Name": "[variable('CommerceMinions')]",
        "ServicesContentPath": "[parameter('SitecoreCommerceEngineZipPath')]",
        "PhysicalPath": "[variable('CommerceMinionsPhysicalPath')]",
		"CommerceServicesDbServer": "[parameter('CommerceServicesDbServer')]",
        "CommerceServicesDbName": "[parameter('CommerceServicesDbName')]",
        "CommerceServicesGlobalDbName": "[parameter('CommerceServicesGlobalDbName')]",
        "SiteHostHeaderName": "[parameter('SiteHostHeaderName')]",
        "CommerceAuthoringServicesPort": "[parameter('CommerceAuthoringServicesPort')]",
        "CommerceSearchProvider": "[parameter('CommerceSearchProvider')]",
        "SolrUrl": "[parameter('SolrUrl')]",
        "SearchIndexPrefix": "[parameter('SearchIndexPrefix')]",
        "UserAccount": "[parameter('UserAccount')]",
        "BraintreeAccount": "[parameter('BraintreeAccount')]",
        "AzureSearchServiceName": "[parameter('AzureSearchServiceName')]",
        "AzureSearchAdminKey": "[parameter('AzureSearchAdminKey')]",
        "AzureSearchQueryKey": "[parameter('AzureSearchQueryKey')]",
		"SitecoreIdentityServicePort": "[parameter('SitecoreIdentityServicePort')]",
		"SitecoreBizFxServicePort": "[parameter('SitecoreBizFxServicePort')]"
      }
    },
    "CreatePathsMinions": {
      "Type": "EnsurePath",
      "Params": {
        "Exists": [
          "[variable('CommerceMinionsPhysicalPath')]"
        ]
      }
    },
    "CreateWebAppPoolMinions": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceMinions')]",
        "Action": "Create-WebAppPool",
        "UserAccount": "[parameter('UserAccount')]"
      }
    },
    "CreateWebsiteMinions": {
      "Type": "ManageCommerceService",
      "Params": {
        "Name": "[variable('CommerceMinions')]",
        "Action": "Create-Website",
        "AppPoolName": "[variable('CommerceMinions')]",
        "PhysicalPath": "[variable('CommerceMinionsPhysicalPath')]",
        "Port": "[parameter('CommerceMinionsServicesPort')]",
        "Signer": "[GetCertificate(variable('Root.Cert.DnsName'), variable('Root.Cert.Store'))]"
      }
    },    
    "CreatePerformanceCounters": {
      "Type": "CreatePerformanceCounters"
    }
  }
}